/*
 * IONOS S3 Object Storage API for contract-owned buckets
 *
 * ## Overview The IONOS S3 Object Storage API for contract-owned buckets is a REST-based API that allows developers and applications to interact directly with IONOS' scalable storage solution, leveraging the S3 protocol for object storage operations. Its design ensures seamless compatibility with existing tools and libraries tailored for S3 systems.  ### API References - [S3 Management API Reference](https://api.ionos.com/docs/s3-management/v1/) for managing Access Keys - S3 API Reference for contract-owned buckets - current document - [S3 API Reference for user-owned buckets](https://api.ionos.com/docs/s3-user-owned-buckets/v2/)  ### User documentation [IONOS S3 Object Storage User Guide](https://docs.ionos.com/cloud/managed-services/s3-object-storage) * [Documentation on user-owned and contract-owned buckets](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/buckets) * [Documentation on S3 API Compatibility](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/s3-api-compatibility) * [S3 Tools](https://docs.ionos.com/cloud/managed-services/s3-object-storage/s3-tools)  ## Endpoints for contract-owned buckets | Location | Region Name | Bucket Type | Endpoint | | --- | --- | --- | --- | | **Berlin, Germany** | **eu-central-3** | Contract-owned | `https://s3.eu-central-3.ionoscloud.com` |  ## Changelog - 30.05.2024 Initial version
 *
 * API version: 2.0.2
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

import "encoding/xml"

// checks if the Metadata1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Metadata1{}

// Metadata1 struct for Metadata1
type Metadata1 struct {
	XMLName xml.Name `xml:"Metadata1"`
	Key1    *string  `json:"key1,omitempty" xml:"key1"`
	Value1  *string  `json:"value1,omitempty" xml:"value1"`
}

// NewMetadata1 instantiates a new Metadata1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetadata1() *Metadata1 {
	this := Metadata1{}

	return &this
}

// NewMetadata1WithDefaults instantiates a new Metadata1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetadata1WithDefaults() *Metadata1 {
	this := Metadata1{}
	return &this
}

// GetKey1 returns the Key1 field value if set, zero value otherwise.
func (o *Metadata1) GetKey1() string {
	if o == nil || IsNil(o.Key1) {
		var ret string
		return ret
	}
	return *o.Key1
}

// GetKey1Ok returns a tuple with the Key1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metadata1) GetKey1Ok() (*string, bool) {
	if o == nil || IsNil(o.Key1) {
		return nil, false
	}
	return o.Key1, true
}

// HasKey1 returns a boolean if a field has been set.
func (o *Metadata1) HasKey1() bool {
	if o != nil && !IsNil(o.Key1) {
		return true
	}

	return false
}

// SetKey1 gets a reference to the given string and assigns it to the Key1 field.
func (o *Metadata1) SetKey1(v string) {
	o.Key1 = &v
}

// GetValue1 returns the Value1 field value if set, zero value otherwise.
func (o *Metadata1) GetValue1() string {
	if o == nil || IsNil(o.Value1) {
		var ret string
		return ret
	}
	return *o.Value1
}

// GetValue1Ok returns a tuple with the Value1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metadata1) GetValue1Ok() (*string, bool) {
	if o == nil || IsNil(o.Value1) {
		return nil, false
	}
	return o.Value1, true
}

// HasValue1 returns a boolean if a field has been set.
func (o *Metadata1) HasValue1() bool {
	if o != nil && !IsNil(o.Value1) {
		return true
	}

	return false
}

// SetValue1 gets a reference to the given string and assigns it to the Value1 field.
func (o *Metadata1) SetValue1(v string) {
	o.Value1 = &v
}

func (o Metadata1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Metadata1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Key1) {
		toSerialize["key1"] = o.Key1
	}
	if !IsNil(o.Value1) {
		toSerialize["value1"] = o.Value1
	}
	return toSerialize, nil
}

type NullableMetadata1 struct {
	value *Metadata1
	isSet bool
}

func (v NullableMetadata1) Get() *Metadata1 {
	return v.value
}

func (v *NullableMetadata1) Set(val *Metadata1) {
	v.value = val
	v.isSet = true
}

func (v NullableMetadata1) IsSet() bool {
	return v.isSet
}

func (v *NullableMetadata1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetadata1(val *Metadata1) *NullableMetadata1 {
	return &NullableMetadata1{value: val, isSet: true}
}

func (v NullableMetadata1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetadata1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
