/*
 * IONOS S3 Object Storage API for contract-owned buckets
 *
 * ## Overview The IONOS S3 Object Storage API for contract-owned buckets is a REST-based API that allows developers and applications to interact directly with IONOS' scalable storage solution, leveraging the S3 protocol for object storage operations. Its design ensures seamless compatibility with existing tools and libraries tailored for S3 systems.  ### API References - [S3 Management API Reference](https://api.ionos.com/docs/s3-management/v1/) for managing Access Keys - S3 API Reference for contract-owned buckets - current document - [S3 API Reference for user-owned buckets](https://api.ionos.com/docs/s3-user-owned-buckets/v2/)  ### User documentation [IONOS S3 Object Storage User Guide](https://docs.ionos.com/cloud/managed-services/s3-object-storage) * [Documentation on user-owned and contract-owned buckets](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/buckets) * [Documentation on S3 API Compatibility](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/s3-api-compatibility) * [S3 Tools](https://docs.ionos.com/cloud/managed-services/s3-object-storage/s3-tools)  ## Endpoints for contract-owned buckets | Location | Region Name | Bucket Type | Endpoint | | --- | --- | --- | --- | | **Berlin, Germany** | **eu-central-3** | Contract-owned | `https://s3.eu-central-3.ionoscloud.com` |  ## Changelog - 30.05.2024 Initial version
 *
 * API version: 2.0.2
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

import "encoding/xml"

// checks if the PutBucketVersioningRequestVersioningConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PutBucketVersioningRequestVersioningConfiguration{}

// PutBucketVersioningRequestVersioningConfiguration Describes the versioning state of the bucket.
type PutBucketVersioningRequestVersioningConfiguration struct {
	XMLName   xml.Name                `xml:"PutBucketVersioningRequestVersioningConfiguration"`
	Status    *BucketVersioningStatus `json:"Status,omitempty" xml:"Status"`
	MfaDelete *MfaDeleteStatus        `json:"MfaDelete,omitempty" xml:"MfaDelete"`
}

// NewPutBucketVersioningRequestVersioningConfiguration instantiates a new PutBucketVersioningRequestVersioningConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPutBucketVersioningRequestVersioningConfiguration() *PutBucketVersioningRequestVersioningConfiguration {
	this := PutBucketVersioningRequestVersioningConfiguration{}

	return &this
}

// NewPutBucketVersioningRequestVersioningConfigurationWithDefaults instantiates a new PutBucketVersioningRequestVersioningConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPutBucketVersioningRequestVersioningConfigurationWithDefaults() *PutBucketVersioningRequestVersioningConfiguration {
	this := PutBucketVersioningRequestVersioningConfiguration{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *PutBucketVersioningRequestVersioningConfiguration) GetStatus() BucketVersioningStatus {
	if o == nil || IsNil(o.Status) {
		var ret BucketVersioningStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutBucketVersioningRequestVersioningConfiguration) GetStatusOk() (*BucketVersioningStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *PutBucketVersioningRequestVersioningConfiguration) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given BucketVersioningStatus and assigns it to the Status field.
func (o *PutBucketVersioningRequestVersioningConfiguration) SetStatus(v BucketVersioningStatus) {
	o.Status = &v
}

// GetMfaDelete returns the MfaDelete field value if set, zero value otherwise.
func (o *PutBucketVersioningRequestVersioningConfiguration) GetMfaDelete() MfaDeleteStatus {
	if o == nil || IsNil(o.MfaDelete) {
		var ret MfaDeleteStatus
		return ret
	}
	return *o.MfaDelete
}

// GetMfaDeleteOk returns a tuple with the MfaDelete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutBucketVersioningRequestVersioningConfiguration) GetMfaDeleteOk() (*MfaDeleteStatus, bool) {
	if o == nil || IsNil(o.MfaDelete) {
		return nil, false
	}
	return o.MfaDelete, true
}

// HasMfaDelete returns a boolean if a field has been set.
func (o *PutBucketVersioningRequestVersioningConfiguration) HasMfaDelete() bool {
	if o != nil && !IsNil(o.MfaDelete) {
		return true
	}

	return false
}

// SetMfaDelete gets a reference to the given MfaDeleteStatus and assigns it to the MfaDelete field.
func (o *PutBucketVersioningRequestVersioningConfiguration) SetMfaDelete(v MfaDeleteStatus) {
	o.MfaDelete = &v
}

func (o PutBucketVersioningRequestVersioningConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PutBucketVersioningRequestVersioningConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["Status"] = o.Status
	}
	if !IsNil(o.MfaDelete) {
		toSerialize["MfaDelete"] = o.MfaDelete
	}
	return toSerialize, nil
}

type NullablePutBucketVersioningRequestVersioningConfiguration struct {
	value *PutBucketVersioningRequestVersioningConfiguration
	isSet bool
}

func (v NullablePutBucketVersioningRequestVersioningConfiguration) Get() *PutBucketVersioningRequestVersioningConfiguration {
	return v.value
}

func (v *NullablePutBucketVersioningRequestVersioningConfiguration) Set(val *PutBucketVersioningRequestVersioningConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullablePutBucketVersioningRequestVersioningConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullablePutBucketVersioningRequestVersioningConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePutBucketVersioningRequestVersioningConfiguration(val *PutBucketVersioningRequestVersioningConfiguration) *NullablePutBucketVersioningRequestVersioningConfiguration {
	return &NullablePutBucketVersioningRequestVersioningConfiguration{value: val, isSet: true}
}

func (v NullablePutBucketVersioningRequestVersioningConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePutBucketVersioningRequestVersioningConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
