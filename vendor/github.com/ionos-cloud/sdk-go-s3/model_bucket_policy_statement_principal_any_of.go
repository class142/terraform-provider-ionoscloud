/*
 * IONOS S3 Object Storage API for contract-owned buckets
 *
 * ## Overview The IONOS S3 Object Storage API for contract-owned buckets is a REST-based API that allows developers and applications to interact directly with IONOS' scalable storage solution, leveraging the S3 protocol for object storage operations. Its design ensures seamless compatibility with existing tools and libraries tailored for S3 systems.  ### API References - [S3 Management API Reference](https://api.ionos.com/docs/s3-management/v1/) for managing Access Keys - S3 API Reference for contract-owned buckets - current document - [S3 API Reference for user-owned buckets](https://api.ionos.com/docs/s3-user-owned-buckets/v2/)  ### User documentation [IONOS S3 Object Storage User Guide](https://docs.ionos.com/cloud/managed-services/s3-object-storage) * [Documentation on user-owned and contract-owned buckets](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/buckets) * [Documentation on S3 API Compatibility](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/s3-api-compatibility) * [S3 Tools](https://docs.ionos.com/cloud/managed-services/s3-object-storage/s3-tools)  ## Endpoints for contract-owned buckets | Location | Region Name | Bucket Type | Endpoint | | --- | --- | --- | --- | | **Berlin, Germany** | **eu-central-3** | Contract-owned | `https://s3.eu-central-3.ionoscloud.com` |  ## Changelog - 30.05.2024 Initial version
 *
 * API version: 2.0.2
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

import "encoding/xml"

// checks if the BucketPolicyStatementPrincipalAnyOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BucketPolicyStatementPrincipalAnyOf{}

// BucketPolicyStatementPrincipalAnyOf Statement applies to the specified IONOS S3 Object Storage users.
type BucketPolicyStatementPrincipalAnyOf struct {
	XMLName xml.Name `xml:"BucketPolicyStatementPrincipalAnyOf"`
	AWS     []string `json:"AWS" xml:"AWS"`
}

// NewBucketPolicyStatementPrincipalAnyOf instantiates a new BucketPolicyStatementPrincipalAnyOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBucketPolicyStatementPrincipalAnyOf(aWS []string) *BucketPolicyStatementPrincipalAnyOf {
	this := BucketPolicyStatementPrincipalAnyOf{}

	this.AWS = aWS

	return &this
}

// NewBucketPolicyStatementPrincipalAnyOfWithDefaults instantiates a new BucketPolicyStatementPrincipalAnyOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBucketPolicyStatementPrincipalAnyOfWithDefaults() *BucketPolicyStatementPrincipalAnyOf {
	this := BucketPolicyStatementPrincipalAnyOf{}
	return &this
}

// GetAWS returns the AWS field value
func (o *BucketPolicyStatementPrincipalAnyOf) GetAWS() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AWS
}

// GetAWSOk returns a tuple with the AWS field value
// and a boolean to check if the value has been set.
func (o *BucketPolicyStatementPrincipalAnyOf) GetAWSOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AWS, true
}

// SetAWS sets field value
func (o *BucketPolicyStatementPrincipalAnyOf) SetAWS(v []string) {
	o.AWS = v
}

func (o BucketPolicyStatementPrincipalAnyOf) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BucketPolicyStatementPrincipalAnyOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsZero(o.AWS) {
		toSerialize["AWS"] = o.AWS
	}
	return toSerialize, nil
}

type NullableBucketPolicyStatementPrincipalAnyOf struct {
	value *BucketPolicyStatementPrincipalAnyOf
	isSet bool
}

func (v NullableBucketPolicyStatementPrincipalAnyOf) Get() *BucketPolicyStatementPrincipalAnyOf {
	return v.value
}

func (v *NullableBucketPolicyStatementPrincipalAnyOf) Set(val *BucketPolicyStatementPrincipalAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableBucketPolicyStatementPrincipalAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableBucketPolicyStatementPrincipalAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBucketPolicyStatementPrincipalAnyOf(val *BucketPolicyStatementPrincipalAnyOf) *NullableBucketPolicyStatementPrincipalAnyOf {
	return &NullableBucketPolicyStatementPrincipalAnyOf{value: val, isSet: true}
}

func (v NullableBucketPolicyStatementPrincipalAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBucketPolicyStatementPrincipalAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
