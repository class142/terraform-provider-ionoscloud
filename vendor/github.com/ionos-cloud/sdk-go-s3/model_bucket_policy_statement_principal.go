/*
 * IONOS S3 Object Storage API for contract-owned buckets
 *
 * ## Overview The IONOS S3 Object Storage API for contract-owned buckets is a REST-based API that allows developers and applications to interact directly with IONOS' scalable storage solution, leveraging the S3 protocol for object storage operations. Its design ensures seamless compatibility with existing tools and libraries tailored for S3 systems.  ### API References - [S3 Management API Reference](https://api.ionos.com/docs/s3-management/v1/) for managing Access Keys - S3 API Reference for contract-owned buckets - current document - [S3 API Reference for user-owned buckets](https://api.ionos.com/docs/s3-user-owned-buckets/v2/)  ### User documentation [IONOS S3 Object Storage User Guide](https://docs.ionos.com/cloud/managed-services/s3-object-storage) * [Documentation on user-owned and contract-owned buckets](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/buckets) * [Documentation on S3 API Compatibility](https://docs.ionos.com/cloud/managed-services/s3-object-storage/concepts/s3-api-compatibility) * [S3 Tools](https://docs.ionos.com/cloud/managed-services/s3-object-storage/s3-tools)  ## Endpoints for contract-owned buckets | Location | Region Name | Bucket Type | Endpoint | | --- | --- | --- | --- | | **Berlin, Germany** | **eu-central-3** | Contract-owned | `https://s3.eu-central-3.ionoscloud.com` |  ## Changelog - 30.05.2024 Initial version
 *
 * API version: 2.0.2
 * Contact: support@cloud.ionos.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"

	"fmt"
)

// BucketPolicyStatementPrincipal struct for BucketPolicyStatementPrincipal
type BucketPolicyStatementPrincipal struct {
	BucketPolicyStatementPrincipalAnyOf *BucketPolicyStatementPrincipalAnyOf
	String                              *string
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *BucketPolicyStatementPrincipal) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into BucketPolicyStatementPrincipalAnyOf
	err = json.Unmarshal(data, &dst.BucketPolicyStatementPrincipalAnyOf)
	if err == nil {
		jsonBucketPolicyStatementPrincipalAnyOf, _ := json.Marshal(dst.BucketPolicyStatementPrincipalAnyOf)
		if string(jsonBucketPolicyStatementPrincipalAnyOf) == "{}" { // empty struct
			dst.BucketPolicyStatementPrincipalAnyOf = nil
		} else {
			return nil // data stored in dst.BucketPolicyStatementPrincipalAnyOf, return on the first match
		}
	} else {
		dst.BucketPolicyStatementPrincipalAnyOf = nil
	}

	// try to unmarshal JSON data into String
	err = json.Unmarshal(data, &dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			return nil // data stored in dst.String, return on the first match
		}
	} else {
		dst.String = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(BucketPolicyStatementPrincipal)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *BucketPolicyStatementPrincipal) MarshalJSON() ([]byte, error) {
	if src.BucketPolicyStatementPrincipalAnyOf != nil {
		return json.Marshal(&src.BucketPolicyStatementPrincipalAnyOf)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableBucketPolicyStatementPrincipal struct {
	value *BucketPolicyStatementPrincipal
	isSet bool
}

func (v NullableBucketPolicyStatementPrincipal) Get() *BucketPolicyStatementPrincipal {
	return v.value
}

func (v *NullableBucketPolicyStatementPrincipal) Set(val *BucketPolicyStatementPrincipal) {
	v.value = val
	v.isSet = true
}

func (v NullableBucketPolicyStatementPrincipal) IsSet() bool {
	return v.isSet
}

func (v *NullableBucketPolicyStatementPrincipal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBucketPolicyStatementPrincipal(val *BucketPolicyStatementPrincipal) *NullableBucketPolicyStatementPrincipal {
	return &NullableBucketPolicyStatementPrincipal{value: val, isSet: true}
}

func (v NullableBucketPolicyStatementPrincipal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBucketPolicyStatementPrincipal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
