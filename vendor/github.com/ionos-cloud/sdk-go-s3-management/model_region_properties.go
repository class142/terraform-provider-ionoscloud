/*
 * IONOS Cloud - S3 Management API
 *
 * S3 Management API is a RESTful API that manages the S3 service configuration for IONOS Cloud.
 *
 * API version: 0.1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

// RegionProperties IONOS Cloud S3 regions they define the location of the bucket, can also be used as `LocationConstraint` for bucket creation.
type RegionProperties struct {
	// The version of the region properties
	Version *int32 `json:"version"`
	// The endpoint URL for the region
	Endpoint *string `json:"endpoint"`
	// The website URL for the region
	Website    *string                     `json:"website"`
	Capability *RegionPropertiesCapability `json:"capability"`
	// The available classes in the region
	Storageclasses *[]string `json:"storageclasses,omitempty"`
	// The data center location of the region as per [Get Location](/docs/cloud/v6/#tag/Locations/operation/locationsGet). *Can't be used as `LocationConstraint` on bucket creation.*
	Location *string `json:"location"`
}

// NewRegionProperties instantiates a new RegionProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegionProperties(version int32, endpoint string, website string, capability RegionPropertiesCapability, location string) *RegionProperties {
	this := RegionProperties{}

	this.Version = &version
	this.Endpoint = &endpoint
	this.Website = &website
	this.Capability = &capability
	this.Location = &location

	return &this
}

// NewRegionPropertiesWithDefaults instantiates a new RegionProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegionPropertiesWithDefaults() *RegionProperties {
	this := RegionProperties{}
	return &this
}

// GetVersion returns the Version field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *RegionProperties) GetVersion() *int32 {
	if o == nil {
		return nil
	}

	return o.Version

}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegionProperties) GetVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}

	return o.Version, true
}

// SetVersion sets field value
func (o *RegionProperties) SetVersion(v int32) {

	o.Version = &v

}

// HasVersion returns a boolean if a field has been set.
func (o *RegionProperties) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// GetEndpoint returns the Endpoint field value
// If the value is explicit nil, the zero value for string will be returned
func (o *RegionProperties) GetEndpoint() *string {
	if o == nil {
		return nil
	}

	return o.Endpoint

}

// GetEndpointOk returns a tuple with the Endpoint field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegionProperties) GetEndpointOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.Endpoint, true
}

// SetEndpoint sets field value
func (o *RegionProperties) SetEndpoint(v string) {

	o.Endpoint = &v

}

// HasEndpoint returns a boolean if a field has been set.
func (o *RegionProperties) HasEndpoint() bool {
	if o != nil && o.Endpoint != nil {
		return true
	}

	return false
}

// GetWebsite returns the Website field value
// If the value is explicit nil, the zero value for string will be returned
func (o *RegionProperties) GetWebsite() *string {
	if o == nil {
		return nil
	}

	return o.Website

}

// GetWebsiteOk returns a tuple with the Website field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegionProperties) GetWebsiteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.Website, true
}

// SetWebsite sets field value
func (o *RegionProperties) SetWebsite(v string) {

	o.Website = &v

}

// HasWebsite returns a boolean if a field has been set.
func (o *RegionProperties) HasWebsite() bool {
	if o != nil && o.Website != nil {
		return true
	}

	return false
}

// GetCapability returns the Capability field value
// If the value is explicit nil, the zero value for RegionPropertiesCapability will be returned
func (o *RegionProperties) GetCapability() *RegionPropertiesCapability {
	if o == nil {
		return nil
	}

	return o.Capability

}

// GetCapabilityOk returns a tuple with the Capability field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegionProperties) GetCapabilityOk() (*RegionPropertiesCapability, bool) {
	if o == nil {
		return nil, false
	}

	return o.Capability, true
}

// SetCapability sets field value
func (o *RegionProperties) SetCapability(v RegionPropertiesCapability) {

	o.Capability = &v

}

// HasCapability returns a boolean if a field has been set.
func (o *RegionProperties) HasCapability() bool {
	if o != nil && o.Capability != nil {
		return true
	}

	return false
}

// GetStorageclasses returns the Storageclasses field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *RegionProperties) GetStorageclasses() *[]string {
	if o == nil {
		return nil
	}

	return o.Storageclasses

}

// GetStorageclassesOk returns a tuple with the Storageclasses field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegionProperties) GetStorageclassesOk() (*[]string, bool) {
	if o == nil {
		return nil, false
	}

	return o.Storageclasses, true
}

// SetStorageclasses sets field value
func (o *RegionProperties) SetStorageclasses(v []string) {

	o.Storageclasses = &v

}

// HasStorageclasses returns a boolean if a field has been set.
func (o *RegionProperties) HasStorageclasses() bool {
	if o != nil && o.Storageclasses != nil {
		return true
	}

	return false
}

// GetLocation returns the Location field value
// If the value is explicit nil, the zero value for string will be returned
func (o *RegionProperties) GetLocation() *string {
	if o == nil {
		return nil
	}

	return o.Location

}

// GetLocationOk returns a tuple with the Location field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegionProperties) GetLocationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.Location, true
}

// SetLocation sets field value
func (o *RegionProperties) SetLocation(v string) {

	o.Location = &v

}

// HasLocation returns a boolean if a field has been set.
func (o *RegionProperties) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

func (o RegionProperties) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}

	if o.Endpoint != nil {
		toSerialize["endpoint"] = o.Endpoint
	}

	if o.Website != nil {
		toSerialize["website"] = o.Website
	}

	if o.Capability != nil {
		toSerialize["capability"] = o.Capability
	}

	if o.Storageclasses != nil {
		toSerialize["storageclasses"] = o.Storageclasses
	}

	if o.Location != nil {
		toSerialize["location"] = o.Location
	}

	return json.Marshal(toSerialize)
}

type NullableRegionProperties struct {
	value *RegionProperties
	isSet bool
}

func (v NullableRegionProperties) Get() *RegionProperties {
	return v.value
}

func (v *NullableRegionProperties) Set(val *RegionProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableRegionProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableRegionProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegionProperties(val *RegionProperties) *NullableRegionProperties {
	return &NullableRegionProperties{value: val, isSet: true}
}

func (v NullableRegionProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegionProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
