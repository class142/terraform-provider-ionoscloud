/*
 * IONOS Cloud - S3 Management API
 *
 * S3 Management API is a RESTful API that manages the S3 service configuration for IONOS Cloud.
 *
 * API version: 0.1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

// StorageClassProperties Details the cross functional aspects of the given storage class.
type StorageClassProperties struct {
	// Explains the motivation for the storage class
	Description *string `json:"description"`
	// The durability of the storage class
	Durability *string `json:"durability"`
	// The availability of the storage class
	Availability *string `json:"availability"`
}

// NewStorageClassProperties instantiates a new StorageClassProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageClassProperties(description string, durability string, availability string) *StorageClassProperties {
	this := StorageClassProperties{}

	this.Description = &description
	this.Durability = &durability
	this.Availability = &availability

	return &this
}

// NewStorageClassPropertiesWithDefaults instantiates a new StorageClassProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageClassPropertiesWithDefaults() *StorageClassProperties {
	this := StorageClassProperties{}
	return &this
}

// GetDescription returns the Description field value
// If the value is explicit nil, the zero value for string will be returned
func (o *StorageClassProperties) GetDescription() *string {
	if o == nil {
		return nil
	}

	return o.Description

}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageClassProperties) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.Description, true
}

// SetDescription sets field value
func (o *StorageClassProperties) SetDescription(v string) {

	o.Description = &v

}

// HasDescription returns a boolean if a field has been set.
func (o *StorageClassProperties) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// GetDurability returns the Durability field value
// If the value is explicit nil, the zero value for string will be returned
func (o *StorageClassProperties) GetDurability() *string {
	if o == nil {
		return nil
	}

	return o.Durability

}

// GetDurabilityOk returns a tuple with the Durability field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageClassProperties) GetDurabilityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.Durability, true
}

// SetDurability sets field value
func (o *StorageClassProperties) SetDurability(v string) {

	o.Durability = &v

}

// HasDurability returns a boolean if a field has been set.
func (o *StorageClassProperties) HasDurability() bool {
	if o != nil && o.Durability != nil {
		return true
	}

	return false
}

// GetAvailability returns the Availability field value
// If the value is explicit nil, the zero value for string will be returned
func (o *StorageClassProperties) GetAvailability() *string {
	if o == nil {
		return nil
	}

	return o.Availability

}

// GetAvailabilityOk returns a tuple with the Availability field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageClassProperties) GetAvailabilityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}

	return o.Availability, true
}

// SetAvailability sets field value
func (o *StorageClassProperties) SetAvailability(v string) {

	o.Availability = &v

}

// HasAvailability returns a boolean if a field has been set.
func (o *StorageClassProperties) HasAvailability() bool {
	if o != nil && o.Availability != nil {
		return true
	}

	return false
}

func (o StorageClassProperties) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}

	if o.Durability != nil {
		toSerialize["durability"] = o.Durability
	}

	if o.Availability != nil {
		toSerialize["availability"] = o.Availability
	}

	return json.Marshal(toSerialize)
}

type NullableStorageClassProperties struct {
	value *StorageClassProperties
	isSet bool
}

func (v NullableStorageClassProperties) Get() *StorageClassProperties {
	return v.value
}

func (v *NullableStorageClassProperties) Set(val *StorageClassProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageClassProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageClassProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageClassProperties(val *StorageClassProperties) *NullableStorageClassProperties {
	return &NullableStorageClassProperties{value: val, isSet: true}
}

func (v NullableStorageClassProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageClassProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
